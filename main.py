#!/usr/bin/env python3
"""
MAIN - EXPERIENCIA NODO 2
========================
Aplicaci√≥n principal que integra la interfaz gr√°fica 
con la l√≥gica de clonaci√≥n de voz.

Estructura del proyecto:
- main.py: Archivo principal (este archivo)
- interfaz_experiencia.py: Interfaz gr√°fica fullscreen
- logica_clonacion.py: L√≥gica de clonaci√≥n con ElevenLabs
- test_audio.py: Utilidad para probar audio
- check_raspberry_pi.sh: Verificaci√≥n para Raspberry Pi OS
"""

import sys
import os
from pathlib import Path

def verificar_dependencias():
    """Verificar que todas las dependencias est√©n disponibles"""
    dependencias_faltantes = []
    
    try:
        import tkinter
    except ImportError:
        dependencias_faltantes.append("tkinter")
    
    try:
        import pyaudio
    except ImportError:
        dependencias_faltantes.append("pyaudio")
    
    try:
        import requests
    except ImportError:
        dependencias_faltantes.append("requests")
    
    try:
        import PIL
    except ImportError:
        dependencias_faltantes.append("pillow")
    
    if dependencias_faltantes:
        print("‚ùå DEPENDENCIAS FALTANTES:")
        for dep in dependencias_faltantes:
            print(f"   ‚Ä¢ {dep}")
        print("\nInstala las dependencias con:")
        print("pip install pyaudio requests pillow")
        if "tkinter" in dependencias_faltantes:
            print("sudo apt-get install python3-tk  # En Linux")
        return False
    
    return True

def verificar_archivos():
    """Verificar que todos los archivos necesarios existan"""
    archivos_necesarios = [
        "interfaz_experiencia.py",
        "logica_clonacion.py",
        "instrucciones.mp4"
    ]
    
    archivos_faltantes = []
    for archivo in archivos_necesarios:
        if not os.path.exists(archivo):
            archivos_faltantes.append(archivo)
    
    if archivos_faltantes:
        print("‚ùå ARCHIVOS FALTANTES:")
        for archivo in archivos_faltantes:
            print(f"   ‚Ä¢ {archivo}")
        return False
    
    return True

def mostrar_informacion_sistema():
    """Mostrar informaci√≥n del sistema"""
    print("üñ•Ô∏è  INFORMACI√ìN DEL SISTEMA:")
    print(f"   ‚Ä¢ Sistema operativo: {sys.platform}")
    print(f"   ‚Ä¢ Versi√≥n de Python: {sys.version.split()[0]}")
    print(f"   ‚Ä¢ Directorio de trabajo: {os.getcwd()}")
    
    # Informaci√≥n espec√≠fica para Raspberry Pi
    if sys.platform.startswith('linux'):
        try:
            with open('/proc/cpuinfo', 'r') as f:
                if 'Raspberry Pi' in f.read():
                    print("   ‚Ä¢ üçì Raspberry Pi detectado")
                else:
                    print("   ‚Ä¢ üêß Sistema Linux gen√©rico")
        except:
            print("   ‚Ä¢ üêß Sistema Linux")
    elif sys.platform == 'darwin':
        print("   ‚Ä¢ üçé macOS")
    elif sys.platform.startswith('win'):
        print("   ‚Ä¢ ü™ü Windows")

def main():
    """Funci√≥n principal"""
    print("=" * 70)
    print("      üé§ EXPERIENCIA NODO 2 - CLONACI√ìN DE VOZ")
    print("=" * 70)
    
    # Verificaciones previas
    print("\nüîç VERIFICANDO SISTEMA...")
    mostrar_informacion_sistema()
    
    print("\nüìã VERIFICANDO DEPENDENCIAS...")
    if not verificar_dependencias():
        print("\n‚ùå No se puede continuar sin las dependencias necesarias.")
        sys.exit(1)
    print("‚úÖ Todas las dependencias est√°n disponibles")
    
    print("\nüìÅ VERIFICANDO ARCHIVOS...")
    if not verificar_archivos():
        print("\n‚ùå No se puede continuar sin los archivos necesarios.")
        sys.exit(1)
    print("‚úÖ Todos los archivos necesarios est√°n presentes")
    
    # Importar y ejecutar la aplicaci√≥n
    try:
        print("\nüöÄ INICIANDO APLICACI√ìN...")
        
        # Agregar el directorio actual al path
        sys.path.insert(0, str(Path(__file__).parent))
        
        # Importar la aplicaci√≥n de interfaz
        from interfaz_experiencia import ExperienciaVozApp
        
        print("‚úÖ M√≥dulos importados correctamente")
        print("\n" + "=" * 70)
        print("    INSTRUCCIONES:")
        print("    ‚Ä¢ La aplicaci√≥n se abrir√° en pantalla completa")
        print("    ‚Ä¢ Presiona ESCAPE para salir")
        print("    ‚Ä¢ Aseg√∫rate de que tu micr√≥fono est√© funcionando")
        print("    ‚Ä¢ Ten altavoces o aud√≠fonos conectados")
        print("=" * 70)
        
        # Crear y ejecutar la aplicaci√≥n
        app = ExperienciaVozApp()
        app.run()
        
    except ImportError as e:
        print(f"\n‚ùå Error al importar m√≥dulos: {e}")
        print("Verifica que todos los archivos est√©n en el directorio correcto.")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Aplicaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    print("\nüëã ¬°Gracias por usar la Experiencia Nodo 2!")

if __name__ == "__main__":
    main()